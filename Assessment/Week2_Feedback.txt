Starting weekly assessment for Yuchen, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 2.30 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.Rhistory**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
CMEE Coursework Repository
Yuchen Yang ( yuchen.yang19@imperial.ac.uk ) 

Each week's work could be found under "WeekX" folder.
Every folder consists of three folders "Code", "Data", "Sandbox" and a README.txt detailing each week's scripts.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, sandbox, Data, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week2
covers `Python` basics

## Author
Yuchen Yang (yy5819@imperial.ac.uk)

***

## structure
there are 4 directories.
- **Data**
- **Code** 
- **Results** 
- **Sandbox** 

### detailed script describution
- basic_io1.py
    ```python
    ##open and print the test.txt in sandbox in two different ways
    ```
- basic_io2.py
    ```python
    ##adding content to the end of testout.txt 
    ```
- basic_io3.py
    ```python
    ##dump dict into pickle file and load pickle file into dict 
    ```
- basic_csv.py
    ```python
    ## manipulate CSV files and create new csv files based on given files
    ```
- cfexercises1.py
- cfexercises2.py  
    ```python
    ##conditions and loops examples
    ##cfexercises1 modified as practicle requesteds
    ```
- oaks.py
    ```python
    ##finding oaks in lists of data using for loop and comprehensions.
    ```
- scope.py
    ```python
    ##examples on variable scope
    ```
- boilerplate.py
    ```python
    ##the very basic of python programme:
    ##the shebang, docstring, internal variables, functions and modules...
    ```
- using_name.py
    ```python
    ##understanding how main and name works
    ```
- sysargv.py
    ```python
    ##to understand sys.argv
    ```
- control_flow.py
    ```python
    ##control flow tools such as if else
    ```
- loops.py
    ```python
    ##example for loops
    ```
- lc1.py
- lc2.py
- dictionary.py
- tuple.py
    ```python
    ##practicles on list comprehensions and for loops
    ```
- test_control_flow.py
    ```python
    ##introducing unit testing with doctet
    ```
- debugme.py
    ```python
    ##example script to debug
    ``` 
- align_seqs.py
    ```python
    ## takes the DNA sequences as an input from a single external file 
    ## and saves the best alignment along with its corresponding score 
    ## in a single text file (your choice of format and file type) to an appropriate location. 
    ```
- align_seqs_fasta.py
    ```bash
    ##take explict inputs or use default fasta files and match their squences, 
    ## output one best result:
    python align_seqs_better.py ../Data/407228326.fasta ../Data/407228412.fasta
    ```
- align_seqs_better.py
    ```bash
    ##take explict inputs or use default fasta files and match their squences, 
    ## output all best results in results folder:
    python align_seqs_better.py ../Data/407228326.fasta ../Data/407228412.fasta
    ```
 - oaks_debugme.py
    ```python
    ## found and fixed the typo bug, added unit test to make sure the function
    ## work as expected, add regex rules to take ambiguous inputs, add codes 
    ## to deal with csv header for file read and write. 
    ```
**********************************************************************

Found following files in results directory: best_align_result.txt, all_best_align_results.txt...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 23 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, align_seqs_better.py, dictionary.py, debugme.py, scope.py, basic_io3.py, cfexercises1.py, tuple.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, basic_io2.py, sysargv.py, align_seqs_fasta.py, control_flow.py, test_control_flow.py, basic_io1.py

Found the following extra files: 
0.5 pt deducted per extra file

Current Points = 100.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Practical for list comprehensions and loops"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
greaterThan100 = [monthAndRainfall for monthAndRainfall in rainfall if monthAndRainfall[1] > 100]
print(greaterThan100)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

monthNamesLessThan50 = [monthAndRainfall[0] for monthAndRainfall in rainfall if monthAndRainfall[1] < 50]
print(monthNamesLessThan50)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

greaterThan100_loop = []
for monthAndRainfall in rainfall:
      if monthAndRainfall[1] > 100:
            greaterThan100_loop.append(monthAndRainfall)
print(greaterThan100_loop)

monthNamesLessThan50_loop = []
for monthAndRainfall in rainfall:
      if monthAndRainfall[1] <50:
            monthNamesLessThan50_loop.append(monthAndRainfall[0])
print(monthNamesLessThan50_loop)

**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.03859s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""example python script"""

__appname__ = 'boilerplate'
__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'n/a'

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.04431s

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""manipulate CSV files and create new csv files based on given files"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../Data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../Data/testcsv.csv','r')
g = open('../Data/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.05726s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
'''conditions and loops examples'''

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys

for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1

def main(argv):
    # print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 99.0

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.03311s

======================================================================
Inspecting script file align_seqs_better.py...

File contents are:
**********************************************************************
#!/usr/bin/env python
"""match two sequences and ouput all best results"""

__author__ = 'Yuchen Yang (yy5819@imperial.ac.uk)'
__version__ = '1.0.0'

import sys
import pickle
import os
import ipdb

# actual input files
# find the inputfile name and read the sequences
if len(sys.argv) > 1:
    File1_direction = r'../Data/' + sys.argv[1]
    File2_direction = r'../Data/' + sys.argv[2]
else:  # using seq1.csv and seq2.csv as default input
    File1_direction = r'../Data/407228326.fasta'
    File2_direction = r'../Data/407228412.fasta'

# re-used the function to deal with fasta file
def openFasta(x):
    """open fasta file and return cleaned string"""
    with open(x,'r') as f:
        fasta = ""
        counter = 0
        for row in f:
            if counter != 0:
                fasta += row.replace("\n","")
            counter += 1
    # print(fasta)
    return fasta

seq1 = openFasta(File1_direction)
seq2 = openFasta(File2_direction)

# # test seqs
# seq1 = "AC"
# seq2 = "TGACCGACGGACACAGGAC"

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

def calculate_score(s1, s2, l1, l2, startpoint):
    """A function that computes a score by returning the number of matches starting from arbitrary startpoint"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # # some formatted output
    # print("." * startpoint + matched)           
    # print("." * startpoint + s2)
    # print(s1)
    # print(score) 
    # print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1
best_results=[]
#if want to use pickle uncomment the best_Result as dict
# best_result={}

# running through to get the highest score
for i in range(l1): 
    z = calculate_score(s1, s2, l1, l2, i)
    if z >= my_best_score:
        my_best_score = z 

# write all hightest score to a file
with open('../Results/all_best_align_results.txt','w') as f:
    for i in range(l1):
        z = calculate_score(s1, s2, l1, l2, i)
        if z == my_best_score:
            my_best_align = "." * i + s2 # adding the format for seq matching
            best_results.append((my_best_align,s1,my_best_score))
            print("writing to result txt files",my_best_align,s1,my_best_score)
            f.write('\n\nbest result:\n{}\n{}\nscore: {}\n'.format(my_best_align,s1,my_best_score))
    f.close()


# # comment out the populate pickle script
# f = open('../Results/all_best_align_results.p','wb') ## note the b: accept binary files
# pickle.dump(best_results, f)
# f.close()

# # comment out the load pick to dict test
# t = open('../Results/all_best_align_results.p','rb')
# test_load_dict = pickle.load(t)
# print(test_load_dict)
# t.close()**********************************************************************

Testing align_seqs_better.py...

align_seqs_better.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
writing to result txt files ............................................................................AAAAAAACAAAAAGATACATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATATACATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGAT
**********************************************************************

Code ran without errors

Time consumed = 9.53944s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Practical for list comprehensions and loops"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 

# create a function that takes a given input and populate the dictionary
def Convert(t, d): 
    """convert input into dic"""
    for t, n in t: 
        d.setdefault(n, []).append(t) 
    return d 
      
# initialize a dict
dictionary = {} 
resultDict = Convert(taxa, dictionary) 
print (resultDict) **********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.03376s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""example script to debug"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

def createabug(x):
    y = x**4
    z = 0.
    y = y/z
    return y

createabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 13, in <module>
    createabug(25)
  File "debugme.py", line 10, in createabug
    y = y/z
ZeroDivisionError: float division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""examples on variable scope"""
__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'
## Try this first

_a_global = 10

def a_function():
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()

print("Outside the function, the value is ", _a_global)


## Now try this

_a_global = 10

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()
print("Outside the function, the value is", _a_global)

# first chunck of newer version shown at class

_a_global = 10

if _a_global >= 5:
    _b_global = _a_global + 5

def a_function():
    _a_global = 5
    
    if _a_global >= 5:
        _b_global =  _a_global + 5

    _a_local = 4

    print("inside the function, the value of _a_global is ", _a_global)
    print("inside the function, the value of _b_global is ", _b_global)
    print("inside the function, the value of _a_local is ", _a_local)

    return None

a_function()

print("outside the function, the value of _a_global is ", _a_global)    
print("outside the function, the value of _b_global is ", _b_global)    


# second chunck of newer version shown at class
_a_global = 10

def a_function():
    _a_local = 4

    print("inside the function, the value of _a_local is ", _a_local)
    print("inside the function, the value of _a_global is ", _a_global)

    return None

a_function()

print("outside the function, the value of _a_global is ", _a_global)


# third chunck of newer version shown at class
_a_global = 10

print("outside the function, the value of _a_global is ", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4

    print("inside the function, the value of _a_global is ", _a_global)
    print("inside the function, the value of _a_local is ", _a_local)

    return None

a_function()

print("outside the function, the value of _a_global now is ", _a_global)

# fourth chunck of newer version shown at class
def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Missing docstrings in one more functions!
.5 pt deducted per missing docstring

Current Points = 91.5

Output (only first 500 characters): 

**********************************************************************
Inside the function, the value is  5
Inside the function, the value is  4
Outside the function, the value is  10
Inside the function, the value is  5
Inside the function, the value is  4
Outside the function, the value is 5
inside the function, the value of _a_global is  5
inside the function, the value of _b_global is  10
inside the function, the value of _a_local is  4
outside the function, the value of _a_global is  10
outside the function, the value of _b_global is  15
inside the function, th
**********************************************************************

Code ran without errors

Time consumed = 0.05833s

======================================================================
Inspecting script file basic_io3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""dump dict into pickle file and load pickle file into dict"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.05425s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""conditions and loops examples"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys


# What does each of foo_x do? 
def foo_1(x): 
    """calculating the square root of x"""
    # print here to keep the fucntion returns a float
    print('suqare root to' + str(x) + 'is: ')
    return x ** 0.5

def foo_2(x, y):
    """compare two numbers and spitting out the bigger one"""
    print('the greater one is: ')
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """if Y is the biggest value, order three numbers in ascending order"""
    if x > y:
        # tmp is a place holder in order to switch values between x and y
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    print('given numbers in ascending order: ')
    return [x, y, z]

def foo_4(x):
    """calculate the factorial of x, specifying (1, x+1) in range since range by default starts with 0"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    print(str(x) + '! is: ')
    return result

def foo_5(x): 
    """a recursive function that calculates the factorial of x"""
    print(str(x) + '! is: ')
    if x == 1:
        return 1
    return x * foo_5(x - 1)

def foo_6(x): 
    """Calculate the factorial of x in a different way"""
    print(str(x) + '! is: ')
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    """call all funcitons using print and hard-coded example value"""
    print(foo_1(69))
    print(foo_2(10,11))
    print(foo_3(2,1,23))
    print(foo_4(10))
    print(foo_5(10))
    print(foo_6(10))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
suqare root to69is: 
8.306623862918075
the greater one is: 
11
given numbers in ascending order: 
[1, 2, 23]
10! is: 
3628800
10! is: 
9! is: 
8! is: 
7! is: 
6! is: 
5! is: 
4! is: 
3! is: 
2! is: 
1! is: 
3628800
10! is: 
3628800

**********************************************************************

Code ran without errors

Time consumed = 0.03803s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""practicles on list comprehensions and for loops"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehensions!

for bird in birds:
    print("latin name:" + bird[0] + ", commom name:" + bird[1] + ", mass:" + str(bird[2]))**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
latin name:Passerculus sandwichensis, commom name:Savannah sparrow, mass:18.7
latin name:Delichon urbica, commom name:House martin, mass:19
latin name:Junco phaeonotus, commom name:Yellow-eyed junco, mass:19.5
latin name:Junco hyemalis, commom name:Dark-eyed junco, mass:19.6
latin name:Tachycineata bicolor, commom name:Tree swallow, mass:20.2

**********************************************************************

Code ran without errors

Time consumed = 0.03256s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Practical for list comprehensions and loops"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latinNames_lc = [bird[0] for bird in birds]
print('latin names: ') 
print(latinNames_lc)

commonNames_lc = [bird[1] for bird in birds]
print('common names: ')
print(commonNames_lc)

bodyMasses_lc = [bird[2] for bird in birds]
print('body masses: ')
print(bodyMasses_lc)


# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 


# define and create three lists in one go
latinNames_loop, commonNames_loop, bodyMasses_loop =  ([] for i in range(3)) 
for bird in birds:
    latinNames_loop.append(bird[0])
    commonNames_loop.append(bird[1])
    bodyMasses_loop.append(bird[2])
print('latin names: ') 
print(latinNames_loop)
print('common names: ')
print(commonNames_loop)
print('body masses: ')
print(bodyMasses_loop)**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
latin names: 
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
common names: 
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
body masses: 
[18.7, 19, 19.5, 19.6, 20.2]
latin names: 
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
common names: 
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree sw
**********************************************************************

Code ran without errors

Time consumed = 0.03757s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""
found and fixed the typo bug, added unit test to make sure the function
work as expected, add regex rules to take ambiguous inputs, add codes 
to deal with csv header for file read and write. 
"""
__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import csv
import sys
# import ipdb
import doctest
import re

def is_an_oak(name):
    """ see if the input matches the rule i set
        
        >>> is_an_oak('Fagus sylvatica') 
        False

        >>> is_an_oak('quercus') 
        True

        >>> is_an_oak('Quercus') 
        True

        >>> is_an_oak('Quercuss') 
        True

        >>> is_an_oak('Quercusss') 
        False

        >>> is_an_oak('Quecuss') 
        True

    """

    # Define function to be tested
    # print("i'm here in the oak function!")
    # print(name.lower().startswith('quercs'))
    # ipdb.set_trace()
    # the function works with "genus", found the typo in 'quercs'
    # # return name.lower().startswith('quercs')
    # adding regex to take fuzz input
    # the regex rule takes an alternative extra s
    # and an alternative missing r as variations to quercus
    # and disregard capital letters 
    if re.match(r"^quer?cuss?$", name, flags=re.I) != None:
        return True
    else:
        return False

def main(argv): 
    """main control to determine if data entries in a file is oak and write to a new file."""
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Data/JustOaksData.csv','w')
    next(f) #skip the header
    taxa = csv.reader(f)
    #set headers for new file
    fieldnames = ['Genus', 'Species'] 
    csvwrite = csv.DictWriter(g,fieldnames=fieldnames)
    csvwrite.writeheader()
    # commented out since not used
    # oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow({'Genus': row[0], 'Species': row[1]})
    return 0


if __name__ == "__main__":
    status = main(sys.argv)

doctest.testmod()**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.07721s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""finding oaks in lists of data using for loop and comprehensions."""
__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    """check if the given string is an oak"""
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.03650s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""example for loops"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.40602s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""understanding how main and name works"""  
# Filename: using_name.py

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.06526s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""takes the DNA sequences as an input from a single external file 
and saves the best alignment along with its corresponding score 
in a single text file (your choice of format and file type) to an appropriate location. """

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

# Two example sequences to match
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"

import csv
import ipdb

temp = []
with open('../Data/seq.csv','r') as csvfile:
    csvreader = csv.reader(csvfile)
    next(csvreader)

    for row in csvreader:
        temp.append(row[1])

csvfile.close()
seq2 = temp[0]
seq1 = temp[1]
# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """A function that computes a score by returning the number of matches starting from arbitrary startpoint (chosen by user)"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # adding the format for seq matching
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

# f = open("../Data/best_align_result.txt","w+")
# f.writelines([my_best_align,s1,"Best score:" + my_best_score])
# f.close() 


# write the result to result folder
with open('../Results/best_align_result.txt','w') as out:
    out.write('{}\n{}\nbest score: {}\n'.format(my_best_align,s1,my_best_score))

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.53619s

======================================================================
Inspecting script file basic_io2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""adding content to the end of testout.txt"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02642s

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""to understand sys.argv"""
import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.03143s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""take explict inputs or use default fasta files and match their squences, output one best result:"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

# Two example sequences to match
# first attempt to modulise the code
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"
import sys
import ipdb


# create a function to open fasta file and return clean data
def openFasta(x):
    """open fasta file and return clean fasta data"""
    with open(x,'r') as f:
        fasta = ""
        counter = 0
        for row in f:
            if counter != 0:
                fasta += row.replace("\n","")
            counter += 1
    print(fasta)
    return fasta

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
def set(f1, f2):
    """ Assign the longer sequence s1, and the shorter to s2
        l1 is length of the longest, l2 that of the shortest"""
    l1 = len(f1)
    l2 = len(f2)
    if l1 >= l2:
        s1 = f1
        s2 = f2
    else:
        s1 = f2
        s2 = f1
        l1, l2 = l2, l1 # swap the two lengths
    return s1, s2, l1, l2

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """calculating matching scores"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences'
def best(s1, s2):
    """find best match and algnment and scores for two fasta"""
    s1, s2, l1, l2 = set(s1, s2)
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)
    return my_best_align, s1, my_best_score

# f = open("../Data/best_align_result.txt","w+")
# f.writelines([my_best_align,s1,"Best score:" + my_best_score])
# f.close() 

def main(argv):
    """main control and write file"""
    if len(argv) >= 3:
        fasta1 = openFasta(argv[1])
        fasta2 = openFasta(argv[2])
    else:
        fasta1 = openFasta("../Data/407228326.fasta")
        fasta2 = openFasta("../Data/407228412.fasta")
    my_best_align, s1, my_best_score = best(fasta1, fasta2)    
    with open('../Data/best_align_result_with_fasta.txt','w') as out:
        out.write('{}\n{}\nbest score: {}\n'.format(my_best_align,s1,my_best_score))
    return 0


if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 4.86637s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""control flow tools such as if else"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.04325s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK: WHY? #######

# def main(argv): 
#     print even_or_odd(22)
#     print even_or_odd(33)
#     return 0

# if (__name__ == "__main__"):
#     status = main(sys.argv)
############################################

doctest.testmod()   # To run with embedded tests**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07797s

======================================================================
Inspecting script file basic_io1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""open and print the test.txt in sandbox in two different ways"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line



First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.02718s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 91.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!