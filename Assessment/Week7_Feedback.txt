Starting weekly assessment for Yuchen, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 40.39 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, HPC, ThesisProject, Week5, Week2, Week4, .git, Week3, MiniProject

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.Rhistory**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
CMEE Coursework Repository
Yuchen Yang ( yuchen.yang19@imperial.ac.uk ) 

Each week's work could be found under "WeekX" folder.
Every folder consists of three folders "Code", "Data", "Sandbox" and a README.txt detailing each week's scripts.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# Week7
covers `Python` II

## Author
Yuchen Yang (yy5819@imperial.ac.uk)

***

## structure
there are 4 directories.
- **Data**
- **Code** 
- **Results** 
- **Sandbox** 

### detailed script description

- blackbirds.py
    ```python
    ## encoding problem with python2 with default code, please run with python3:
    python3 blackbirds.py
    ## regex search for kingdom, phylum, and species
    ```
- DrawFW.py
    ```python
    ## generate food web and plot network map with networkx
    ```
- fmr.R
    ```R
    ## Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
    ## 1999 dataset to a file fmr.pdf.
    ## Writes the list of species names to species.csv
    ```
- LV1.py
    ```python
    ## Lotka-Volterra Model with default values, plot species over time and relation to each other
    ```  
- LV2.py
    ```python
    ## Lotka-Volterra Model with user input values, plot species over time and relation to each other
    ```  
- LV3.py
    ```python
    ## Lotka-Volterra Model with user input values, plot species over discrete time and relation to each other
    ```    
- LV4.py
    ```python
    ## Lotka-Volterra Model with user input values, plot species over discrete time and relation to each other with random flucuation to growth rate
    ```    
- MyFirstJupyterNb.ipynb
    ```ipynb
    ## created my first jupyter notebook
    ```    
- Nets.R
    ```R
    ## example of using R to build a network
    ```    
- Nets.py
    ```python
    ## python version of Nets.R - example of using R to build a network
    ```   
- profileme.py, profileme2.py
    ```python
    #in ipython run:
    run -p profileme.py
    run -p profileme2.py
    ## An example script to show profiling optimisations, pre-optimisation and optimised
    ```   
- regexs.py
    ```python
    ## regex examples
    ```    
- run_fmr_R.py
    ```python
    ## runing fmr.R from python using subprocess
    ```    
- run_LV.py
    ```python
    ## run LV models (4 versions) with user input and profile
    ```    
- TestR.py, TestR.R
    ```
    ## example set to run R using Python
    ```    
- timeitme.py
    ```python
    ## example for timeit
    ```   
- using_os.py
    ```python
    ## using regex and subprocess to find directories and files with certain patterns
    ```    **********************************************************************

Found following files in results directory: TestR.Rout, fmr_plot.pdf, Nets_py.svg, LV1.pdf, LV4.pdf, LV2.pdf, TestR_errFile.Rout, Food_network.pdf, QMEENet.svg, LV3.pdf...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 19 code files: TestR.py, regexs.py, LV3.py, profileme2.py, timeitme.py, blackbirds.py, Nets.py, TestR.R, profileme.py, LV4.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, DrawFW.py, Nets.R, run_fmr_R.py, run_LV.py, LV2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""test runing r example"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import subprocess
subprocess.Popen("/usr/bin/Rscript --verbose TestR.R > \
../Results/TestR.Rout 2> ../Results/TestR_errFile.Rout", shell=True).wait()**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.15256s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""regex example"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import re

my_string = "a given string"

match = re.search(r'\s', my_string)
print(match)

match.group()

match = re.search(r'\d', my_string)
print(match)

MyStr = 'an example'
match = re.search(r'\w*\s', MyStr) # what pattern is this?

if match:                      
    print('found a match:', match.group()) 
else:
    print('did not find a match')    

match = re.search(r'2' , "it takes 2 to tango")
match.group()

match = re.search(r'\d' , "it takes 2 to tango")
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()

re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a '

re.search(r'^\w*.*?\s', 'once upon a time').group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()

re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*','1432.75+60.22i').group()

re.search(r'[AGTC]+', 'the sequence ATTCGT').group()

re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group()

MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
# #error example, commented out:
# match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s&]+",MyStr)
# match.group()

match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s&]+",MyStr)
match.group()

**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 

**********************************************************************

Code ran without errors

Time consumed = 0.02875s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Lotka-Volterra Model in scipy take command args, with appropriate paras, and discrete"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import matplotlib.pylab as p
import matplotlib.backends.backend_pdf


def dCR_dt(RC0, t=0):
    """ Returns the growth rate of predator and prey populations at any given time step """
    # create pre-rendered with 0s
    RC = sc.zeros((t, 2), dtype='float')
    RC[0, 0] = RC0[0]
    RC[0, 1] = RC0[1]
    for i in range(t-1):
        RC[i+1, 0] = RC[i, 0] * (1 + r * (1 - RC[i, 0] / K) - a * RC[i, 1])
        RC[i+1, 1] = RC[i, 1] * (1 - z + e * a * RC[i, 0])
        # print(RC[i+1])
    return RC


# Define parameters:
if len(sys.argv) == 6:
    # Resource growth rate
    r = float(sys.argv[1])
    # Consumer search rate
    a = float(sys.argv[2])
    # Consumer mortality rate
    z = float(sys.argv[3])
    # Consumer production efficiency
    e = float(sys.argv[4])
    # Carrying capacity
    K = float(sys.argv[5])
else:
    r = 1.   
    a = 0.1
    z = 1.5
    e = 0.75
    K = 35
 

# define time and init R0 and C0
t = 100
R0 = 10
C0 = 5

# init: 10 prey, 5 predator
RC0 = sc.array([R0, C0], dtype='float')
RC = dCR_dt(RC0, t)
print("consumer density: %s, resource density: %s" %(RC[t-1, 1], RC[t-1, 0]))


f1 = p.figure()
p.plot(range(t), RC[:, 0], 'g-', label='Resource density')
p.plot(range(t), RC[:, 1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

f2 = p.figure()
p.plot(RC[:, 0], RC[:, 1], 'r-', label='Consumer density')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

pdf = matplotlib.backends.backend_pdf.PdfPages('../Results/LV3.pdf')
pdf.savefig(f1)
pdf.savefig(f2)
pdf.close()
p.close('all')
**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
consumer density: 2.83750644188, resource density: 28.3425199783

**********************************************************************

Code ran without errors

Time consumed = 0.72627s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""profile example"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'


def my_squares(iters):
    """a list comprehension to create a list of square numbers til input iters"""
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """ create comma seperated string based on given string for iter time """
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """ run my_squre and my_join using x and y """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.65237s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""time example"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'


##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 9.93705s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""regex practical"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import re
import ipdb

# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n',' ')
# You may want to make other changes to the text. 

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

# these are not working for python2, commented out:
# text = text.encode('ascii', 'ignore') # first encode into ascii bytes
# text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.

print(text)
# 6 groups
my_reg = r'(Kingdom)\s+([a-zA-Z]+).+?(Phylum)\s+([a-zA-Z]+).+?(Species)\s+([a-zA-Z]+\s[a-zA-Z]+)'
Species = re.findall(my_reg, text)

# ipdb.set_trace()

for i in Species:
	print(i[0] + ":" + i[1])
	print(i[2] + ":" + i[3])
	print(i[4] + ":" + i[5])
	print("===============")
# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Taxonomic Hierarchy           Kingdom Animalia  – Animal, animaux, animals        Phylum Chordata  – cordés, cordado, chordates           Subphylum Vertebrata  – vertebrado, vertébrés, vertebrates              Class Aves  – Birds, oiseaux                 Order Passeriformes  – Perching Birds, passereaux                    Family Icteridae  – American Blackbirds, Orioles, New World Blackbirds                       Genus Euphagus Cassin, 1867 – American Blackbirds                          Species E
**********************************************************************

Code ran without errors

Time consumed = 0.41300s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""visualise qmee ctd collab net"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import matplotlib.patches as patches
import pandas as pd
import ipdb

# Open csv
links = pd.read_csv("../Data/QMEE_Net_Mat_edges.csv", header=0)
nodes = pd.read_csv("../Data/QMEE_Net_Mat_nodes.csv", header=0)


count = links.shape[0]
# ipdb.set_trace()
# set column name to match row id to create cordinates system
links.columns = list(range(count))

# init list for of links, wrights, and colors 
linklist = []
weights = []
color = []

for i in range(count):
    for j in range(count):
        if links[i][j] > 0:
            #[(id, id, weight)]
            linklist.append((i,j))
            #width for edges, with very basic scaling
            weights.append(links[i][j])

for i in nodes.Type:
    if i == 'University':
        color.append('b')
    elif i == 'Hosting Partner':
        color.append('g')
    else:
        color.append('r')
        
# normalise weight list       
normed_weights = [1 + i/10 for i in weights]



# add layout basiced on item index
G = nx.DiGraph()

pos = nx.spring_layout(nodes.index.values) 
# add data to graph object
G.add_nodes_from(nodes.index.values)
G.add_edges_from(linklist)

# initialise plot
p.axis('off')
# draw the graph
nx.draw_networkx(G, pos, 
    node_color = color, 
    node_size = 2000, 
    with_labels = False, 
    width = normed_weights,
    edge_color = 'grey')
# nx.draw_networkx_edges(G, pos, width = normed_weights, edge_color = 'grey')
# add lable from nodes
nx.draw_networkx_labels(G, pos, nodes["id"])

# create legends
blue = patches.Patch(color='b', label='University')
green = patches.Patch(color='g', label='Hosting Partner')
red = patches.Patch(color='r', label='Non-Hosting Partner')
p.legend(handles=[blue, green, red])
p.savefig('../Results/Nets_py.svg')
p.close()
**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 283, in fruchterman_reingold_layout
    raise ValueError
ValueError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "Nets.py", line 53, in <module>
    pos = nx.spring_layout(nodes.index.values)
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 287, in fruchterman_reingold_layout
    A = nx.to_numpy_matrix(G, weight=weight)
  File "/usr/lib/python3/dist-packages/networkx/convert_matrix.py", line 308, in to_numpy_matrix
    nodelist = G.nodes()
AttributeError: 'numpy.ndarray' object has no attribute 'nodes'

If you suspect this is an IPython bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True


======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.09330s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""profile example"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    """a loop to create a list of square numbers til input iters"""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """ create comma seperated string based on given string for iter time """
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """ run my_squre and my_join using x and y """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.42654s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Lotka-Volterra Model in scipy take command args, with appropriate paras, and discrete, with a random gaussian fluctuation"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import scipy.stats as stats
import matplotlib.pylab as p
import matplotlib.backends.backend_pdf


def dCR_dt(RC0, t=0):
    """ Returns the growth rate of predator and prey populations at any given time step """
    # create pre-rendered with 0s
    RC = sc.zeros((t, 2))
    RC[0, 0] = RC0[0]
    RC[0, 1] = RC0[1]
    for i in range(t-1):
        # add norm fluctuation (-.1,.1) to avoid booming R 
        RC[i+1, 0] = RC[i, 0] * \
            (1 + (r + stats.norm.rvs(loc=0, scale=0.1)) *
             (1 - RC[i, 0] / K) - a * RC[i, 1])
        RC[i+1, 1] = RC[i, 1] * \
            (1 - z + stats.norm.rvs(0, 0.1) + e * a * RC[i, 0])

    return RC


# Define parameters:
if len(sys.argv) == 6:
    # Resource growth rate
    r = float(sys.argv[1])
    # Consumer search rate
    a = float(sys.argv[2])
    # Consumer mortality rate
    z = float(sys.argv[3])
    # Consumer production efficiency
    e = float(sys.argv[4])
    # Carrying capacity
    K = float(sys.argv[5])
else:
    r = 1.   
    a = 0.1
    z = 1.5
    e = 0.75
    K = 35



# define time and init R0 and C0
t = 170
R0 = 10
C0 = 5

# init: 10 prey, 5 predator
RC0 = sc.array([R0, C0], dtype='float')
RC = dCR_dt(RC0, t)
print("consumer density: %s, resource density: %s" %(RC[t-1, 1], RC[t-1, 0]))



f1 = p.figure()
p.plot(range(t), RC[:, 0], 'g-', label='Resource density')
p.plot(range(t), RC[:, 1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

f2 = p.figure()
p.plot(RC[:, 0], RC[:, 1], 'r-', label='Consumer density')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

pdf = matplotlib.backends.backend_pdf.PdfPages('../Results/LV4.pdf')
pdf.savefig(f1)
pdf.savefig(f2)
pdf.close()
p.close('all')
**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
consumer density: 3.69318120187, resource density: 14.4742222397

**********************************************************************

Code ran without errors

Time consumed = 0.92470s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17664s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"notebook example\"\"\"\n",
    "\n",
    "__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'\n",
    "__version__ = '0.0.1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAPBAMAAABgjEDtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA782r3SJ2ZjIQmUS7VIlAnjihAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAwElEQVQYGWNg/GQs72z0hQEVMAYw5BcwNKIKMsxiAIkyo4mGg0XZJqAKR4BFOUCi0Q2c3QFwWaAJ3Iq5j0LXH+A9n8DAuvwxWAooysC4dn4B0wEG/gSGLRO4JUEaQKJMDgwMPGBROQYGMaAgRNQAKsrxq7zcHC66ACrK+xckBARgEx7A1H4DiyFEmQ8wxCcwODEwTIOpZVnAwMAuwHDxJEP/BYaVDAzca+RlVnCf/3OBgeFd2hSRCZxWeROghqBRAGPPN8vbJxBHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{True}$$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPBAMAAACCUFuUAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvdmc0Qu+8iZlR2iUR1i74cAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA+UlEQVQYGWMQsv/kovo/gQEIhGJBJAzIFzAwSAiAeGxNMDEQPV+BgYFrA1ikCExCCZA42wEGEEAXn8ZwAav4SgaGPWcPgNQznl4TwDBlrSZQGdCcSgZuSwYnkHg6A4MBnxnDiwSgeIvGTwbuRob3CUBxoMABjgsMHEDNQPVAbYxn/ScAxZm/n2SQ91q1aAFYfCUDW/gEeZA429X/Dvshjga5k4HdgEF+GlB8GgPXP3mgIUAAFue/wLB/nkARwxsGBi3mAAa2AwwM8goMDAwcBQz3pRLA9lYy/mZgSWCYYv/dk4GBU+VsTpTQf823a9Y+YEjyuQZUih0AAHGBRtIqn6whAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{False}$$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""os practical"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import ipdb

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
  for d in dir:
    # get the first letter instead of the whole name
    if d[0].startswith("C"):
      FilesDirsStartingWithC.append(d)
  for d in subdir:
    if d[0].startswith("C"):
      FilesDirsStartingWithC.append(d) 
  for f in files:  
    if f[0].startswith("C"):
      FilesDirsStartingWithC.append(f)  
  
print('Files/Directories starting with "C":')
print(set(FilesDirsStartingWithC))
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
FilesDirsStartingWithc_C = []
for (dir, subdir, files) in subprocess.os.walk(home):
    for d in dir:
      if d[0].lower().startswith("c"):
        FilesDirsStartingWithC.append(d)
    for d in subdir:
      if d[0].lower().startswith("c"):
        FilesDirsStartingWithc_C.append(d)
    for f in files:
      if f[0].lower().startswith("c"):
        FilesDirsStartingWithc_C.append(f)

print('Files/Directories starting with "C/c":')
print(set(FilesDirsStartingWithc_C))

#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
DirsStartingWithc_C = []
for (dir, subdir, files) in subprocess.os.walk(home):
    for d in dir:
      if d[0].lower().startswith("c"):
        DirsStartingWithc_C.append(d)
    for d in subdir:
      if d[0].lower().startswith("c"):
        DirsStartingWithc_C.append(d)

print('Directories starting with "C/c":')
print(set(DirsStartingWithc_C))**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Files/Directories starting with "C":
{'Chaetoceros criophilus_Growth rate_NA.svg', 'ChaparralWildlife_TX_3Dec2005_08.JPG', 'Cetina-Heredia et al._2018_Journal of Geophysical Research Oceans.pdf', 'Community.Biomass~AGB.Trophic.Guilds.W.O.pdf', 'C080995EE43877D88A845767E261666D4F5110CD', 'Compile_Report.sh', 'Comments 28-11-2019', 'CerradoDryDegreePlDist.svg', 'CRBRFiguresTables_TD.docx', 'CMEE Mres+Michael Massam+Supervisor.pdf', 'ChallengeA.pdf', 'CMEE MSc+Dominic Barker+Supervisor.pdf', 'Coex3D
**********************************************************************

Code ran without errors

Time consumed = 9.97536s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Lotka-Volterra Model in scipy"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p
import matplotlib.backends.backend_pdf

def dCR_dt(pops, t=0):
    """Returns the growth rate of predator and prey populations at any given time step"""

    R = pops[0]
    C = pops[1]
    dRdt = r*R - a*R*C
    dCdt = -z*C + e*a*R*C

    return sc.array([dRdt, dCdt])


# Define parameters:
# Resource growth rate
r = 1.
# Consumer search rate
a = 0.1
# Consumer mortality rate
z = 1.5
# Consumer production efficiency
e = 0.75

# integrate 0-15, 1000 points:
t = sc.linspace(0, 15, 1000)

# init: 10 prey, 5 predator
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

print(infodict['message'])



# Plot population densityb
f1 = p.figure()
p.plot(t, pops[:, 0], 'g-', label='Resource density') 
p.plot(t, pops[:, 1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
# p.show()


f2 = p.figure()
p.plot(pops[:, 0], pops[:, 1], 'r-', label='Consumer density')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()

pdf = matplotlib.backends.backend_pdf.PdfPages('../Results/LV1.pdf')
pdf.savefig(f1)
pdf.savefig(f2)
pdf.close()
p.close('all')**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Integration successful.

**********************************************************************

Code ran without errors

Time consumed = 0.80085s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""ploting foodweb data"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmAdjList(N = 2, C = 0.5):
    """ Generate random list for consumer and resource pairs"""
    Ids = range(N) 
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:  # If connectance is higher than random ones, then there is a link between species 
            Lnk = sc.random.choice(Ids,2).tolist() # Generate a random sample with 2 species, and convert to list
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)  
    return ALst


# Number of species
MaxN = 30
# Connectance
C = 0.75  

# Generate random food web
AdjL = sc.array(GenRdmAdjList(MaxN, C))
print(AdjL)
Sps = sc.unique(AdjL)  # Get species ids
print(Sps)

# Gnerate body size
SizRan = ([-10, 10]) # Use log10 scale
Sizs = sc.random.uniform(SizRan[0], SizRan[1], MaxN) # Randomly distributed node size
print(Sizs)

# Plot histogram
p.hist(Sizs) # log10 scale 
p.hist(10 ** Sizs) # raw scale
p.close('all') # close all open plot objects

pos = nx.circular_layout(Sps) # Take species data and plot in circular layout

# Create a network graph object
G = nx.Graph()

# Add nodes and links
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL)) # this function needs a tuple input

# Generate node sizes proportional to log body sizes
NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs))

# Plot the graph and saves to pdf
f = p.figure()
nx.draw_networkx(G, pos, node_size = NodSizs)
f.savefig(r'../Results/Food_network.pdf')
p.close('all')**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
[[ 0  3]
 [22  7]
 [ 1 23]
 [25 14]
 [29 12]
 [17 29]
 [ 4 14]
 [12  9]
 [29 20]
 [25  6]
 [21  7]
 [ 4 12]
 [17 28]
 [19 12]
 [26 24]
 [23 22]
 [14  5]
 [ 9  8]
 [10 12]
 [ 1 14]
 [ 8 16]]
[ 0  1  3  4  5  6  7  8  9 10 12 14 16 17 19 20 21 22 23 24 25 26 28 29]
[ 0.19423341 -7.12434611  2.16369872  8.35554884  5.03849693 -6.76324784
 -1.07186524  1.36930576  0.08977746 -9.04353824  2.67180125 -1.07354243
  8.08172125  9.61358529 -6.82371182 -4.02768811  3.91535957 -7.87885868
 -1.24621733  8.79
**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
        
#Test plot
#plot(net, edge.arrow.size=1, edge.curved=.1,
#    vertex.color="orange", vertex.frame.color="#555555",
#     vertex.label=V(net)$Type, vertex.label.color="black",
#     vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""run r from python"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import subprocess
import ipdb

#Popen.stdout
#If the stdout argument was PIPE, this attribute is a file object that provides output from the child process. Otherwise, it is None.
#Popen.stderr
#If the stderr argument was PIPE, this attribute is a file object that provides error output from the child process. Otherwise, it is None.
p = subprocess.Popen("Rscript fmr.R", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)


#Popen.communicate(input=None)
#Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. The optional input argument should be a string to be sent to the child process, or None, if no data should be sent to the child.
#communicate() returns a tuple (stdoutdata, stderrdata).
stdout, stderr = p.communicate()

# ipdb.set_trace()
if stderr:
    print("--------------")
    print("Raise error:")
    print(stderr.decode())
else:
    print("--------------")
    print("fmr.R is executed:")
    print(stdout.decode())**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
--------------
fmr.R is executed:
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.57549s

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""run Lotka-Volterra Model profile"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'

import os
# # cprofile in python allows more methods to deal with profile
# import cProfile

os.system("python -m cProfile LV1.py")
os.system("python -m cProfile LV2.py 1 0.1 1.5 0.75 4300")
os.system("python -m cProfile LV3.py 1 0.1 1.5 0.75 38")
os.system("python -m cProfile LV3.py 1 0.1 1.5 0.75 18")**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Integration successful.
         412970 function calls (406612 primitive calls) in 0.862 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgInfo)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgSpec)
        1    0.000    0.000    0.000    0.000 <string>:1(Arguments)
        1    0.000    0.000    0.0
**********************************************************************

Code ran without errors

Time consumed = 3.36630s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Lotka-Volterra Model in scipy take command args"""

__author__ = 'Yuchen YANG (YY5819@ic.ac.uk)'
__version__ = '0.0.1'


import sys
import scipy as sc
import matplotlib.pylab as p
import matplotlib.backends.backend_pdf
import scipy.integrate as integrate

def dCR_dt(pops, t=0):
    """ Returns the growth rate of predator and prey populations at any given time step"""

    R = pops[0]
    C = pops[1]
    dRdt = r*R*(1 - R/K) - a*R*C
    dCdt = -z*C + e*a*R*C

    return sc.array([dRdt, dCdt])


# take command args:
if len(sys.argv) == 6:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
    r = 1.   
    a = 0.1
    z = 1.5
    e = 0.75
    K = 4300

# integrate 0-15, 1000 points:
t = sc.linspace(0, 15, 1000)

# init: 10 prey, 5 predator
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

print(infodict['message'])


f1 = p.figure()
p.plot(t, pops[:, 0], 'g-', label='Resource density')
p.plot(t, pops[:, 1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

f2 = p.figure()
p.plot(pops[:, 0], pops[:, 1], 'r-', label='Consumer density')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
# p.show()  # To display the figure

pdf = matplotlib.backends.backend_pdf.PdfPages('../Results/LV2.pdf')
pdf.savefig(f1)
pdf.savefig(f2)
pdf.close()
p.close('all')**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Integration successful.

**********************************************************************

Code ran without errors

Time consumed = 0.84352s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!