}
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
# Runs a simulation of the Ricker model
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations)
{
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
}
return (N)
}
plot(Ricker(generations=10), type="l")
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-Ricker()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100) { # Generates 1000 random values between 0.5 and 1.5 for p0
#initialize
N<-matrix(NA,numyears,length(p0)) # Makes a matrix populated with NAs. It has rows = numyears and colums = length(p0)
N[1,]<-p0 # Places the values of p0 into row 1
for (yr in 2:numyears) #for each pop, loop through the years
{
# Calculates the population size for each year across all columns
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print("11111111111111111111111")
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
N<-matrix(NA,numyears,length(p0)) # Makes a matrix populated with NAs. It has rows = numyears and colums = length(p0)
N[1,]<-p0 # Places the values of p0 into row 1
for (yr in 2:numyears) #for each pop, loop through the years
{
# Calculates the population size for each year across all columns
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
print("2222222222222222222222222")
return(N)
print(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print("11111111111111111111111")
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
print("222222222222222222")
return(N)
print(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print("11111111111111111111111")
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100) { # Generates 1000 random values between 0.5 and 1.5 for p0
#initialize
N<-matrix(NA,numyears,length(p0)) # Makes a matrix populated with NAs. It has rows = numyears and colums = length(p0)
N[1,]<-p0 # Places the values of p0 into row 1
for (yr in 2:numyears) #for each pop, loop through the years
{
# Calculates the population size for each year across all columns
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
plot(stochrickvect(generations=10), type="l")
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print("11111111111111111111111")
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100) { # Generates 1000 random values between 0.5 and 1.5 for p0
#initialize
N<-matrix(NA,numyears,length(p0)) # Makes a matrix populated with NAs. It has rows = numyears and colums = length(p0)
N[1,]<-p0 # Places the values of p0 into row 1
for (yr in 2:numyears) #for each pop, loop through the years
{
# Calculates the population size for each year across all columns
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print("11111111111111111111111")
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
print("222222222222222222")
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
type0f(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
return(N)
type0f(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
print(type0f(N))
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
return(N)
print(type0f(N))
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
print(typeof(N))
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
return(N)
print(typeof(N))
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print(typeof(N))
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
print(typeof(N))
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
print(typeof(N))
print(N)
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
print(typeof(N))
print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
#print(typeof(N))
#print(N)
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
#print(typeof(N))
#print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
#print(typeof(N))
#print(N)
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(length(p0),0,sigma))
}
#print(typeof(N))
#print(N)
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
